// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 15.1.1 Build 189 12/02/2015 SJ Lite Edition"

// DATE "02/25/2017 18:01:26"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module AddSub4 (
	a,
	b,
	sub,
	s,
	cout);
input 	[3:0] a;
input 	[3:0] b;
input 	sub;
output 	[3:0] s;
output 	cout;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \s[0]~output_o ;
wire \s[1]~output_o ;
wire \s[2]~output_o ;
wire \s[3]~output_o ;
wire \cout~output_o ;
wire \a[0]~input_o ;
wire \b[0]~input_o ;
wire \addSub|bit0|s~0_combout ;
wire \a[1]~input_o ;
wire \sub~input_o ;
wire \addSub|bit0|cout~0_combout ;
wire \b[1]~input_o ;
wire \addSub|bit1|s~combout ;
wire \a[2]~input_o ;
wire \b[2]~input_o ;
wire \addSub|bit1|cout~0_combout ;
wire \addSub|bit2|s~0_combout ;
wire \a[3]~input_o ;
wire \b[3]~input_o ;
wire \addSub|bit2|cout~0_combout ;
wire \addSub|bit3|s~0_combout ;


cycloneive_io_obuf \s[0]~output (
	.i(\addSub|bit0|s~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[0]~output .bus_hold = "false";
defparam \s[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \s[1]~output (
	.i(\addSub|bit1|s~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[1]~output .bus_hold = "false";
defparam \s[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \s[2]~output (
	.i(\addSub|bit2|s~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[2]~output .bus_hold = "false";
defparam \s[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \s[3]~output (
	.i(\addSub|bit3|s~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \s[3]~output .bus_hold = "false";
defparam \s[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \cout~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cout~output_o ),
	.obar());
// synopsys translate_off
defparam \cout~output .bus_hold = "false";
defparam \cout~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit0|s~0 (
// Equation(s):
// \addSub|bit0|s~0_combout  = \a[0]~input_o  $ (\b[0]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\a[0]~input_o ),
	.datad(\b[0]~input_o ),
	.cin(gnd),
	.combout(\addSub|bit0|s~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit0|s~0 .lut_mask = 16'h0FF0;
defparam \addSub|bit0|s~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sub~input (
	.i(sub),
	.ibar(gnd),
	.o(\sub~input_o ));
// synopsys translate_off
defparam \sub~input .bus_hold = "false";
defparam \sub~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit0|cout~0 (
// Equation(s):
// \addSub|bit0|cout~0_combout  = (\b[0]~input_o  & (\a[0]~input_o )) # (!\b[0]~input_o  & ((\sub~input_o )))

	.dataa(\a[0]~input_o ),
	.datab(\sub~input_o ),
	.datac(gnd),
	.datad(\b[0]~input_o ),
	.cin(gnd),
	.combout(\addSub|bit0|cout~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit0|cout~0 .lut_mask = 16'hAACC;
defparam \addSub|bit0|cout~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit1|s (
// Equation(s):
// \addSub|bit1|s~combout  = \a[1]~input_o  $ (\sub~input_o  $ (\addSub|bit0|cout~0_combout  $ (\b[1]~input_o )))

	.dataa(\a[1]~input_o ),
	.datab(\sub~input_o ),
	.datac(\addSub|bit0|cout~0_combout ),
	.datad(\b[1]~input_o ),
	.cin(gnd),
	.combout(\addSub|bit1|s~combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit1|s .lut_mask = 16'h6996;
defparam \addSub|bit1|s .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[2]~input (
	.i(b[2]),
	.ibar(gnd),
	.o(\b[2]~input_o ));
// synopsys translate_off
defparam \b[2]~input .bus_hold = "false";
defparam \b[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit1|cout~0 (
// Equation(s):
// \addSub|bit1|cout~0_combout  = (\addSub|bit0|cout~0_combout  & ((\a[1]~input_o ) # (\sub~input_o  $ (\b[1]~input_o )))) # (!\addSub|bit0|cout~0_combout  & (\a[1]~input_o  & (\sub~input_o  $ (\b[1]~input_o ))))

	.dataa(\sub~input_o ),
	.datab(\b[1]~input_o ),
	.datac(\addSub|bit0|cout~0_combout ),
	.datad(\a[1]~input_o ),
	.cin(gnd),
	.combout(\addSub|bit1|cout~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit1|cout~0 .lut_mask = 16'hF660;
defparam \addSub|bit1|cout~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit2|s~0 (
// Equation(s):
// \addSub|bit2|s~0_combout  = \sub~input_o  $ (\a[2]~input_o  $ (\b[2]~input_o  $ (\addSub|bit1|cout~0_combout )))

	.dataa(\sub~input_o ),
	.datab(\a[2]~input_o ),
	.datac(\b[2]~input_o ),
	.datad(\addSub|bit1|cout~0_combout ),
	.cin(gnd),
	.combout(\addSub|bit2|s~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit2|s~0 .lut_mask = 16'h6996;
defparam \addSub|bit2|s~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[3]~input (
	.i(b[3]),
	.ibar(gnd),
	.o(\b[3]~input_o ));
// synopsys translate_off
defparam \b[3]~input .bus_hold = "false";
defparam \b[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit2|cout~0 (
// Equation(s):
// \addSub|bit2|cout~0_combout  = (\addSub|bit1|cout~0_combout  & ((\a[2]~input_o ) # (\sub~input_o  $ (\b[2]~input_o )))) # (!\addSub|bit1|cout~0_combout  & (\a[2]~input_o  & (\sub~input_o  $ (\b[2]~input_o ))))

	.dataa(\sub~input_o ),
	.datab(\b[2]~input_o ),
	.datac(\addSub|bit1|cout~0_combout ),
	.datad(\a[2]~input_o ),
	.cin(gnd),
	.combout(\addSub|bit2|cout~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit2|cout~0 .lut_mask = 16'hF660;
defparam \addSub|bit2|cout~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \addSub|bit3|s~0 (
// Equation(s):
// \addSub|bit3|s~0_combout  = \sub~input_o  $ (\a[3]~input_o  $ (\b[3]~input_o  $ (\addSub|bit2|cout~0_combout )))

	.dataa(\sub~input_o ),
	.datab(\a[3]~input_o ),
	.datac(\b[3]~input_o ),
	.datad(\addSub|bit2|cout~0_combout ),
	.cin(gnd),
	.combout(\addSub|bit3|s~0_combout ),
	.cout());
// synopsys translate_off
defparam \addSub|bit3|s~0 .lut_mask = 16'h6996;
defparam \addSub|bit3|s~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign s[0] = \s[0]~output_o ;

assign s[1] = \s[1]~output_o ;

assign s[2] = \s[2]~output_o ;

assign s[3] = \s[3]~output_o ;

assign cout = \cout~output_o ;

endmodule
