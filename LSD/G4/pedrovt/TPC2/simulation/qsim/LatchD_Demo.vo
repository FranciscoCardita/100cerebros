// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 15.1.1 Build 189 12/02/2015 SJ Lite Edition"

// DATE "03/06/2017 19:36:42"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module LatchD (
	dataIn,
	enable,
	dataOut);
input 	dataIn;
input 	enable;
output 	dataOut;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \dataOut~output_o ;
wire \dataIn~input_o ;
wire \enable~input_o ;
wire \dataOut$latch~combout ;


cycloneive_io_obuf \dataOut~output (
	.i(\dataOut$latch~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\dataOut~output_o ),
	.obar());
// synopsys translate_off
defparam \dataOut~output .bus_hold = "false";
defparam \dataOut~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \dataIn~input (
	.i(dataIn),
	.ibar(gnd),
	.o(\dataIn~input_o ));
// synopsys translate_off
defparam \dataIn~input .bus_hold = "false";
defparam \dataIn~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \enable~input (
	.i(enable),
	.ibar(gnd),
	.o(\enable~input_o ));
// synopsys translate_off
defparam \enable~input .bus_hold = "false";
defparam \enable~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb dataOut$latch(
// Equation(s):
// \dataOut$latch~combout  = (\enable~input_o  & (\dataIn~input_o )) # (!\enable~input_o  & ((\dataOut$latch~combout )))

	.dataa(gnd),
	.datab(\dataIn~input_o ),
	.datac(\dataOut$latch~combout ),
	.datad(\enable~input_o ),
	.cin(gnd),
	.combout(\dataOut$latch~combout ),
	.cout());
// synopsys translate_off
defparam dataOut$latch.lut_mask = 16'hCCF0;
defparam dataOut$latch.sum_lutc_input = "datac";
// synopsys translate_on

assign dataOut = \dataOut~output_o ;

endmodule
