// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/03/2017 19:06:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Register8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] d;
reg reset;
reg set;
// wires                                               
wire [7:0] q;

// assign statements (if any)                          
Register8 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.d(d),
	.q(q),
	.reset(reset),
	.set(set)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
	reset = #100000 1'b1;
	reset = #50000 1'b0;
	reset = #50000 1'b1;
	reset = #100000 1'b0;
	reset = #150000 1'b1;
	reset = #50000 1'b0;
	reset = #50000 1'b1;
	reset = #100000 1'b0;
	reset = #50000 1'b1;
	reset = #100000 1'b0;
	reset = #50000 1'b1;
end 

// set
initial
begin
	set = 1'b1;
	set = #200000 1'b0;
	set = #150000 1'b1;
	set = #50000 1'b0;
	set = #50000 1'b1;
	set = #50000 1'b0;
	set = #150000 1'b1;
	set = #200000 1'b0;
	set = #50000 1'b1;
end 

// clk
initial
begin
	clk = 1'b1;
	clk = #25000 1'b0;
	clk = #25000 1'b1;
	clk = #150000 1'b0;
	clk = #20000 1'b1;
	clk = #155000 1'b0;
	clk = #25000 1'b1;
	clk = #25000 1'b0;
	clk = #5000 1'b1;
	clk = #30000 1'b0;
	clk = #65000 1'b1;
	clk = #25000 1'b0;
	clk = #25000 1'b1;
	clk = #25000 1'b0;
	clk = #75000 1'b1;
	clk = #50000 1'b0;
	clk = #25000 1'b1;
	clk = #100000 1'b0;
	clk = #30000 1'b1;
	clk = #45000 1'b0;
	clk = #25000 1'b1;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b1;
	d[7] = #300000 1'b0;
	d[7] = #300000 1'b1;
	d[7] = #200000 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b1;
	d[6] = #400000 1'b0;
	d[6] = #200000 1'b1;
	d[6] = #200000 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
	d[5] = #200000 1'b1;
	d[5] = #100000 1'b0;
	d[5] = #200000 1'b1;
	d[5] = #100000 1'b0;
	d[5] = #100000 1'b1;
	d[5] = #100000 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b1;
	d[4] = #100000 1'b0;
	d[4] = #200000 1'b1;
	d[4] = #100000 1'b0;
	d[4] = #100000 1'b1;
	d[4] = #200000 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b1;
	d[3] = #100000 1'b0;
	d[3] = #100000 1'b1;
	d[3] = #300000 1'b0;
	d[3] = #300000 1'b1;
	d[3] = #100000 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
	d[2] = #100000 1'b1;
	d[2] = #200000 1'b0;
	d[2] = #200000 1'b1;
	d[2] = #100000 1'b0;
	d[2] = #200000 1'b1;
	d[2] = #100000 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
	d[1] = #100000 1'b1;
	d[1] = #100000 1'b0;
	d[1] = #200000 1'b1;
	d[1] = #100000 1'b0;
	d[1] = #100000 1'b1;
	d[1] = #200000 1'b0;
	d[1] = #100000 1'b1;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b1;
	d[0] = #200000 1'b0;
	d[0] = #100000 1'b1;
	d[0] = #200000 1'b0;
	d[0] = #100000 1'b1;
	d[0] = #100000 1'b0;
	d[0] = #100000 1'b1;
end 
endmodule

