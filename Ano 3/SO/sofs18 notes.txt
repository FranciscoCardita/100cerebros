N1 (FBLT) + N2 (DZ [incluindo o bloco da Root Directory]) = DISK_BLOCKS - IT - SB - FILT
&&
N1 >= N2/128

-> caso limite #1:
	N1 * 128 = N2, mas sobra 1 block; block vai para IT, a nao ser:

	-> caso limite #2:
		1 block ir para IT (dar mais 8 inodes) forçaria FILT a mudar o tamanho por 1 block tbm; nesse caso, o block vai para Root Directory, que e inicializada com 2 blocks em vez de apenas 1

--------------

3 tipos de ficheiros:
	- regulares  (quadrados)
	- diretorios (bolas)
	- atalhos    (triangulos) - ficheiro cujo conteudo é o caminho para um outro ficheiro

Diretorios = tabelas com o header:

	-------------------------------------------------------
	| nome do ficheiro | inode que aponta para o ficheiro |
	-------------------------------------------------------

Isto permite que o mesmo ficheiro tenha nomes diferentes (nao copias, o mesmo ficheiro!) [a.k.a. hard links]

Para destruir um ficheiro, removem-se todas as referencias a ele (i.e. apagam-se todos os seus "nomes")

--------------

uint8_t block[BlockSize];
soWriteBlock(0, block); // enche root directory's first block with zeros

--

SOSuperBlock sb;
uint32_t ref[ReferencesPerBlock];
SOInode inodes[InodesPerBlock];
SODirEntry dir[DirEntriesPerBlock];

--------------

alloc - so chama refill se ifree != 0

refill - enche a (retrieval) cache ate 20, mas so a partir de um bloco portanto pode encher menos (i.e. se um bloco ja so tinha 1 reference, so enche a cache com essa unica reference)
	head = (head + num_references_added_to_cache) % ReferencePerBlock

deplete - enche num bloco so, portanto podem sobrar referencias na (insertion) cache

funcoes devem chamar a versao global de sub-funcoes (i.e. sofs18::functionName )

--------------

.testtool /tmp/zzz/

--------------

para lidar com erros:

if (...)
	throw SOException(err, __FUNCTION__);

ENOSPC=no space left on device
--------------

A cada inode estao varios blocos de discos associados (sequencialmente!)

fbn = numero do bloco, da perspetiva do ficheiro

Um ficheiro pode ter buracos: é possivel alocar o bloco 300 de um ficheiro sem ele ter um bloco 200, por exemplo (estes 'buracos' são na verdade blocos cheios de 0s).
Se um ficheiro contem um bloco so com 0s, usa-se NullReference para indicar esse bloco. Ref=NullReference não indica necessariamente que um bloco não existe (depende do valor de size).

soFreeFileBlocks "apaga" todos os blocos a partir de um dado block number (da perspetiva do ficheiro). Tem que ter inteligência para dar saltos se uma entrada de i1 e/ou i2 está Null.

--------------
soTraversePath
	Na traducaio de caminhos absolutos para inode numbers, ignoramos atalhos
	O caminho tem que existir, e temos que ter permissoes adequadas para percorrer o caminho ('x' no caso de diretórios para os podermos atravessar (sem 'r/w' não conseguimos ver os seus conteúdos)) - é preciso confirmar que temos a esta permissão 'x' para cada diretório no path, e ter 'r' no último diretório (usar função checkInodeAccess [permissões: owner | group | other] ).
	Para obter o caminho, 2 opções: 
		- split on "/", reduce multiple "/" seguidas to apenas 1 split - usar strtok várias vezes
		- usar recurrência até ter só uma "/" (que é igual a 0) (usar libgen c library, dirname e basename)

soGetDirEntry
	Percorrer tudo até encontrar, se chegar ao fim sem encontrar não existe. Vai ter que se ir fazendo a pesquisa bloco a bloco. Se não encontrar, devolve NullReference.
	pih = Parent Inode Handler

soAddDirEntry
	Insert no primeiro "buraco" do diretorio cujo inode handler é pih.
	Tem que garantir que o nome da nova entrada ainda não existe (tem que varrer o diretório todo para o fazer, e neste processo regista logo qual é o "index" do primeiro buraco).
	Não usar soGetDirEntry.
	Se não houver buracos, tem que alocar um novo bloco - primeiro formatar e depois chamar writeFileBlock. Neste caso, terá também que atualizar o size ( += BlockSize ) do diretório.

soDeleteDirEntry
	Tem que garantir que o nome existe varrendo o diretório até o encontrar, e substitui essa entrada por NR + nome = '\0'

soRenameDirEntry
	Encontrar um entrada e mudar o seu nome 

soCheckDirEntry
	Varrer o diretório, confirmar que só existem as duas primeiras entradas (. e ..)