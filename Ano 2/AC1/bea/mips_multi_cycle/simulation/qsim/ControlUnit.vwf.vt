// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2017 19:01:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [5:0] OpCode;
reg Reset;
// wires                                               
wire [1:0] ALUop;
wire ALUSelA;
wire [1:0] ALUSelB;
wire IorD;
wire IRWrite;
wire MemRead;
wire MemToReg;
wire MemWrite;
wire [1:0] PCSource;
wire PCWrite;
wire PCWriteCond;
wire RegDest;
wire RegWrite;
wire [3:0] STATE;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.ALUSelA(ALUSelA),
	.ALUSelB(ALUSelB),
	.Clock(Clock),
	.IorD(IorD),
	.IRWrite(IRWrite),
	.MemRead(MemRead),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.OpCode(OpCode),
	.PCSource(PCSource),
	.PCWrite(PCWrite),
	.PCWriteCond(PCWriteCond),
	.RegDest(RegDest),
	.RegWrite(RegWrite),
	.Reset(Reset),
	.STATE(STATE)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
initial
begin
	repeat(28)
	begin
		Clock = 1'b0;
		Clock = #17500 1'b1;
		# 17500;
	end
	Clock = 1'b0;
	Clock = #17500 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #940000 1'b1;
end 
// OpCode[ 5 ]
initial
begin
	OpCode[5] = 1'b0;
	OpCode[5] = #140000 1'b1;
	OpCode[5] = #320000 1'b0;
end 
// OpCode[ 4 ]
initial
begin
	OpCode[4] = 1'b0;
end 
// OpCode[ 3 ]
initial
begin
	OpCode[3] = 1'b0;
	OpCode[3] = #320000 1'b1;
	OpCode[3] = #420000 1'b0;
end 
// OpCode[ 2 ]
initial
begin
	OpCode[2] = 1'b0;
	OpCode[2] = #740000 1'b1;
	OpCode[2] = #100000 1'b0;
end 
// OpCode[ 1 ]
initial
begin
	OpCode[1] = 1'b0;
	OpCode[1] = #140000 1'b1;
	OpCode[1] = #460000 1'b0;
	OpCode[1] = #240000 1'b1;
end 
// OpCode[ 0 ]
initial
begin
	OpCode[0] = 1'b0;
	OpCode[0] = #140000 1'b1;
	OpCode[0] = #320000 1'b0;
end 
endmodule

